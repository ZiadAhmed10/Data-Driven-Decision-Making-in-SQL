1-Age of the actors from the USA [Subseqent Select]

SELECT a.gender, -- Report for male and female actors from the USA 
       max(a.year_of_birth), -- The year of birth of the oldest actor
       min(a.year_of_birth) -- The year of birth of the youngest actor
FROM
   (SELECT *
   From actors
   where nationality = 'USA'
   ) as a 					-- Use a subsequen SELECT to get all information about actors from the US
GROUP BY a.gender;
------------------------------
2-Which is the favorite movie ?

SELECT m.title, 
COUNT(*),
AVG(r.rating)
FROM renting AS r
LEFT JOIN customers AS c
ON c.customer_id = r.customer_id
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE c.date_of_birth BETWEEN '1970-01-01' AND '1979-12-31'
GROUP BY m.title
HAVING COUNT(*) > 1		
ORDER BY AVG(r.rating); 	
------------------------------
3-Favorite actors in spain ?

SELECT a.name,  c.gender,
       COUNT(*) AS number_views, 
       AVG(r.rating) AS avg_rating
FROM renting as r
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
LEFT JOIN actsin as ai
ON r.movie_id = ai.movie_id
LEFT JOIN actors as a
ON ai.actor_id = a.actor_id
Where c.country = 'Spain' 		-- Select only customers from Spain
GROUP BY a.name, c.gender
HAVING AVG(r.rating) IS NOT NULL 
  AND COUNT(*) > 5 
ORDER BY avg_rating DESC, number_views DESC;
------------------------------
4-KPIs Per each country :

SELECT 
	c.country,                   				-- For each country report
	Count(r.renting_id) AS number_renting, 			-- The number of movie rentals
	AVG(r.rating) AS average_rating, 			-- The average rating
	SUM(m.renting_price) AS revenue         		-- The revenue from movie rentals
FROM renting AS r
LEFT JOIN customers AS c
ON c.customer_id = r.customer_id
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE date_renting >= '2019-01-01'
GROUP BY c.country;
------------------------------
5-Select all customers with more than 10 movie rentals

SELECT *
FROM customers
where customer_id in            
	(SELECT customer_id
	FROM renting
	GROUP BY customer_id
	Having count(renting_id)> 10);
------------------------------
6- Movies with rating above the average rating:

SELECT title 
FROM movies
WHERE movie_id in
	(SELECT movie_id
	 FROM renting
     GROUP BY movie_id
     HAVING AVG(rating) > 
		(SELECT AVG(rating)
		 FROM renting));
------------------------------
7-Select customers with less than 5 movie rentals [Corelated Subquery]

SELECT *
FROM customers as c
WHERE 5 > 
	(SELECT count(*)
	FROM renting as r
	WHERE r.customer_id = c.customer_id);
------------------------------
8-Select all customers with a minimum rating smaller than 4

SELECT *
FROM customers as c
WHERE 4 >  
	(SELECT MIN(rating)
	FROM renting AS r
	WHERE r.customer_id = c.customer_id);
------------------------------
9-OLAP [Group by CUBE]

SELECT gender,  
	   country,
	   count(*)
FROM customers
GROUP BY CUBE (gender, country)
ORDER BY country;
------------------------------
10-OLAP [Group by ROLLUP] 

SELECT country,
       gender,
	   COUNT(*)
FROM customers
Group by ROLLUP (country,gender)
ORDER BY country, gender; 
------------------------------
11-Analyzing preferences of genres across countries

SELECT 
	c.country, 		-- Select country
	m.genre, 		-- Select genre
    AVG(r.rating), 		-- Average ratings
	COUNT(*) 		-- Count number of movie rentals
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
GROUP BY c.country, m.genre 		-- Aggregate for each country and each genre
ORDER BY c.country, m.genre;
------------------------------
12-Getting the number of actors per each nationality and gender 

SELECT 
	nationality ,
    	gender ,
    	count(actor_id) 
FROM actors
GROUP BY GROUPING SETS ((nationality), (gender), ()); 
------------------------------
13-Getting the average rating of customers aggregated by country and gender [Using GROUPING SETS and LEFT JOIN]

SELECT 
	c.country, 
    	c.gender,
	AVG(r.rating)
FROM renting AS r
LEFT JOIN customers AS c
ON r.customer_id = c.customer_id
GROUP BY GROUPING SETS ((country, gender), country , gender , ());
------------------------------
14-Getting the customers' preference for genres 

SELECT genre,
	   AVG(rating) AS avg_rating,
	   COUNT(rating) AS n_rating,
       	   COUNT(*) AS n_rentals,     
	   COUNT(DISTINCT m.movie_id) AS n_movies 
FROM renting AS r
LEFT JOIN movies AS m
ON m.movie_id = r.movie_id
WHERE r.movie_id IN ( 
	SELECT movie_id
	FROM renting
	GROUP BY movie_id
	HAVING COUNT(rating) >= 3 )
AND r.date_renting >= '2018-01-01'
GROUP BY genre
Order by avg_rating DESC;
------------------------------
15-Analyzing customer preference for actors [Using LEFT JOINS , GROUPING SETS]

SELECT a.nationality,
           a.gender,
	   AVG(r.rating) AS avg_rating,
	   COUNT(r.rating) AS n_rating,
	   COUNT(*) AS n_rentals,
	   COUNT(DISTINCT a.actor_id) AS n_actors
FROM renting AS r
LEFT JOIN actsin AS ai
ON ai.movie_id = r.movie_id
LEFT JOIN actors AS a
ON ai.actor_id = a.actor_id
WHERE r.movie_id IN ( 
	SELECT movie_id
	FROM renting
	GROUP BY movie_id
	HAVING COUNT(rating) >= 4)
AND r.date_renting >= '2018-04-01'
GROUP BY GROUPING SETS ((nationality ,gender) , nationality , gender , ());
------------------------------
